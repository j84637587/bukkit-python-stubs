from typing import List, Collection, Optional, TypeVar, Generic
import org.bukkit.block import Biome, BlockState, BlockData
from org.bukkit.entity import Entity, EntityType, LivingEntity
from org.bukkit import Location
from org.bukkit import Material
from org.bukkit import TreeType
from org.bukkit import HeightMap
from random import Random
from typing import Callable

T = TypeVar('T', bound=Entity)

class RegionAccessor(Generic[T]):
    """
    A RegionAccessor gives access to getting, modifying and spawning Biome, BlockState and Entity,
    as well as generating some basic structures.
    """

    def getBiome(self, location: Location) -> Biome: ...
    def getBiome(self, x: int, y: int, z: int) -> Biome: ...
    def setBiome(self, location: Location, biome: Biome) -> None: ...
    def setBiome(self, x: int, y: int, z: int, biome: Biome) -> None: ...
    def getBlockState(self, location: Location) -> BlockState: ...
    def getBlockState(self, x: int, y: int, z: int) -> BlockState: ...
    def getBlockData(self, location: Location) -> BlockData: ...
    def getBlockData(self, x: int, y: int, z: int) -> BlockData: ...
    def getType(self, location: Location) -> Material: ...
    def getType(self, x: int, y: int, z: int) -> Material: ...
    def setBlockData(self, location: Location, blockData: BlockData) -> None: ...
    def setBlockData(self, x: int, y: int, z: int, blockData: BlockData) -> None: ...
    def setType(self, location: Location, material: Material) -> None: ...
    def setType(self, x: int, y: int, z: int, material: Material) -> None: ...
    def generateTree(self, location: Location, random: Random, type: TreeType) -> bool: ...
    def generateTree(self, location: Location, random: Random, type: TreeType, stateConsumer: Optional[Callable[[BlockState], None]]) -> bool: ...
    def generateTree(self, location: Location, random: Random, type: TreeType, statePredicate: Optional[Callable[[BlockState], bool]]) -> bool: ...
    def spawnEntity(self, location: Location, type: EntityType) -> Entity: ...
    def spawnEntity(self, loc: Location, type: EntityType, randomizeData: bool) -> Entity: ...
    def getEntities(self) -> List[Entity]: ...
    def getLivingEntities(self) -> List[LivingEntity]: ...
    def getEntitiesByClass(self, cls: Type[T]) -> Collection[T]: ...
    def getEntitiesByClasses(self, *classes: Type) -> Collection[Entity]: ...
    def createEntity(self, location: Location, clazz: Type[T]) -> T: ...
    def spawn(self, location: Location, clazz: Type[T]) -> T: ...
    def spawn(self, location: Location, clazz: Type[T], function: Optional[Callable[[T], None]]) -> T: ...
    def spawn(self, location: Location, clazz: Type[T], randomizeData: bool, function: Optional[Callable[[T], None]]) -> T: ...
    def getHighestBlockYAt(self, x: int, z: int) -> int: ...
    def getHighestBlockYAt(self, location: Location) -> int: ...
    def getHighestBlockYAt(self, x: int, z: int, heightMap: HeightMap) -> int: ...
    def getHighestBlockYAt(self, location: Location, heightMap: HeightMap) -> int: ...
    def addEntity(self, entity: T) -> T: ...