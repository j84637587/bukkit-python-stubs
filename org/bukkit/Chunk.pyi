from typing import Collection
from org.bukkit.block import Biome, Block, BlockState
from org.bukkit.block.data import BlockData
from org.bukkit.entity import Entity, Player
from org.bukkit.generator.structure import GeneratedStructure, Structure
from org.bukkit.persistence import PersistentDataHolder
from org.bukkit.plugin import Plugin
from org.bukkit import World, ChunkSnapshot

class Chunk(PersistentDataHolder):
    """
    Represents a chunk of blocks.

    If the chunk is not yet fully generated and data is requested from the chunk,
    then the chunk will only be generated as far as it needs to provide the
    requested data.
    """

    def getX(self) -> int: ...
    def getZ(self) -> int: ...
    def getWorld(self) -> World: ...
    def getBlock(self, x: int, y: int, z: int) -> Block: ...
    def getChunkSnapshot(self) -> ChunkSnapshot: ...
    def getChunkSnapshot(self, includeMaxblocky: bool, includeBiome: bool, includeBiomeTempRain: bool) -> ChunkSnapshot: ...
    def isEntitiesLoaded(self) -> bool: ...
    def getEntities(self) -> Collection[Entity]: ...
    def getTileEntities(self) -> Collection[BlockState]: ...
    def isGenerated(self) -> bool: ...
    def isLoaded(self) -> bool: ...
    def load(self, generate: bool) -> bool: ...
    def load(self) -> bool: ...
    def unload(self, save: bool) -> bool: ...
    def unload(self) -> bool: ...
    def isSlimeChunk(self) -> bool: ...
    def isForceLoaded(self) -> bool: ...
    def setForceLoaded(self, forced: bool) -> None: ...
    def addPluginChunkTicket(self, plugin: Plugin) -> bool: ...
    def removePluginChunkTicket(self, plugin: Plugin) -> bool: ...
    def getPluginChunkTickets(self) -> Collection[Plugin]: ...
    def getInhabitedTime(self) -> int: ...
    def setInhabitedTime(self, ticks: int) -> None: ...
    def contains(self, block: BlockData) -> bool: ...
    def contains(self, biome: Biome) -> bool: ...
    def getLoadLevel(self) -> 'Chunk.LoadLevel': ...
    def getStructures(self) -> Collection[GeneratedStructure]: ...
    def getStructures(self, structure: Structure) -> Collection[GeneratedStructure]: ...
    def getPlayersSeeingChunk(self) -> Collection[Player]: ...

    class LoadLevel:
        """
        An enum to specify the load level of a chunk.
        """
        INACCESSIBLE = ...
        BORDER = ...
        TICKING = ...
        ENTITY_TICKING = ...
        UNLOADED = ...