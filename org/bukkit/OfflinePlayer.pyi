from typing import Optional, Union
from datetime import datetime, timedelta
from uuid import UUID

from org.bukkit import ServerOperator, AnimalTamer, ConfigurationSerializable
from org.bukkit.ban import ProfileBanList
from org.bukkit.entity import Player, EntityType
from org.bukkit.permissions import ServerOperator
from org.bukkit.profile import PlayerProfile
from org.bukkit import Statistic, Material, Location

class OfflinePlayer(ServerOperator, AnimalTamer, ConfigurationSerializable):
    """
    Represents a reference to a player identity and the data belonging to a
    player that is stored on the disk and can, thus, be retrieved without the
    player needing to be online.
    """

    def isOnline(self) -> bool: ...
    
    def getName(self) -> Optional[str]: ...

    def getUniqueId(self) -> UUID: ...

    def getPlayerProfile(self) -> PlayerProfile: ...

    def isBanned(self) -> bool: ...

    def ban(self, reason: Optional[str], expires: Optional[Union[datetime, timedelta]], source: Optional[str]) -> Optional[ProfileBanList.BanEntry[PlayerProfile]]: ...

    def isWhitelisted(self) -> bool: ...

    def setWhitelisted(self, value: bool) -> None: ...

    def getPlayer(self) -> Optional[Player]: ...

    def getFirstPlayed(self) -> int: ...

    def getLastPlayed(self) -> int: ...

    def hasPlayedBefore(self) -> bool: ...

    def getBedSpawnLocation(self) -> Optional[Location]: ...

    def getRespawnLocation(self) -> Optional[Location]: ...

    def incrementStatistic(self, statistic: Statistic, amount: Optional[int] = 1, material: Optional[Material] = None, entityType: Optional[EntityType] = None) -> None: ...

    def decrementStatistic(self, statistic: Statistic, amount: Optional[int] = 1, material: Optional[Material] = None, entityType: Optional[EntityType] = None) -> None: ...

    def setStatistic(self, statistic: Statistic, newValue: int, material: Optional[Material] = None, entityType: Optional[EntityType] = None) -> None: ...

    def getStatistic(self, statistic: Statistic, material: Optional[Material] = None, entityType: Optional[EntityType] = None) -> int: ...

    def getLastDeathLocation(self) -> Optional[Location]: ...

    def getLocation(self) -> Optional[Location]: ...